<?php

namespace App\Http\Controllers;

use App\bot_settings;
use App\Models\LogicModel;
use App\Models\SettingModel;
use Carbon\Carbon;
use Illuminate\Http\Request;
use phpDocumentor\Reflection\Types\Self_;
use Telegram\Bot\Api;
use Telegram;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Exceptions\TelegramResponseException;
use Telegram\Bot\HttpClients\GuzzleHttpClient;

class HomeController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public $keyboard = [
        ['üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫', 'üí∏ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å'],
        ['üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'üó£ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']
    ];

    public $paymentKeyboard = [
        ['üí∏ –í—ã–≤–µ—Å—Ç–∏', 'üîô –ù–∞–∑–∞–¥'],
    ];

    public $paymentKeyboardFrame = [
        ['üîô –ù–∞–∑–∞–¥'],
    ];

    public $questionKeyboard = [
        ['üîô –ù–∞–∑–∞–¥'],
    ];
    public static $bonusKeyboard = [];
    private static $_token = '944214855:AAF_Cd4MwxoFiCd0_i8Gkl_gcCmRcWs8cq8';
    public $bitcoin = 100000000;

    function __construct() {
        $paramsModel = new bot_settings();
        $botParams = $paramsModel->getSettings()[0];
        self::$bonusKeyboard =  [
            [['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)]],
            [['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)]],
            [['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)]],
            [['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)]],
            [['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)], ['text' => 'üî≤', 'callback_data' => rand($botParams->Random_sum_start * $this->bitcoin, $botParams->Random_sum_end * $this->bitcoin)]],
        ];
    }
    public function getHomepage()
    {
        $settingsModel = new SettingModel();
        $data['settings'] = $settingsModel->getSettins();

        return view('home', $data);
    }

    public function setSetting(Request $request) {
        $settingsModel = new SettingModel();
        $settingsModel->setSettings($request->all()['url']);

        return redirect()->back()->with('status', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }

    public function getBotSettings() {
        $botSettings = new bot_settings();
        $data['settings'] = $botSettings->getSettings();

        return view('settings', $data);
    }

    public function getStatistic() {
        $botSettings = new bot_settings();
        $data['users'] = $botSettings->getUsers();

        return view('statistic', $data);
    }

    public function getQuestions() {
        $botSettings = new bot_settings();
        $data['questions'] = $botSettings->getQuestions();

        return view('questions', $data);
    }

    public function getMailsPage() {
        $botSettings = new bot_settings();

        return view('mails-page');
    }

    public function getPaymentsList() {
        $logicModel = new LogicModel();
        $data['payments'] = $logicModel->getPaymentList();
        return view('payments', $data);
    }

    public function updatePaymentList(Request $request) {
        $logicModel = new LogicModel();
        $logicModel->updatePayment($request->all()['id'], $request->all()['status']);
        if ($request->all()['status'] == 1) {
            Telegram::sendMessage([
                'chat_id' => $request->all()['userId'],
                'text' => "<b>‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n –°—É–º–º–∞ –≤ " . $request->all()['value'] . " BTC, —Å–∫–æ—Ä–æ –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç",
                'parse_mode' => 'HTML',
            ]);
        } elseif ($request->all()['status'] == 2) {
            Telegram::sendMessage([
                'chat_id' => $request->all()['userId'],
                'text' => "<b>‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>",
                'parse_mode' => 'HTML',
            ]);
        }
        return redirect()->back()->with('status', '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }

    public function sendMailToUsers(Request $request) {
        $botSettings = new bot_settings();
        $users = $botSettings->getUsers();
        $mail = $request->all()['mail'];
        $success = 0;
        $errors = 0;


        foreach ($users as $user) {
            try {
                Telegram::sendMessage([
                    'chat_id' => $user->telegramId,
                    'text' => $mail,
                    'parse_mode' => 'HTML',
                    'disable_web_page_preview' => true
                ]);
                $success++;
            } catch (TelegramResponseException $e) {
                $errorData = $e->getResponseData();
                if ($errorData['ok'] === false) {
                    $errors++;
                }

            }
        }
        return redirect()->back()->with('status', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: ' . $success . ', –° –æ—à–∏–±–∫–æ–π: ' . $errors);
    }


    public function answerQuestion(Request $request) {
        $botSettings = new bot_settings();
        $data = $request->all();
        $botSettings->answerQuestion($data['ticket'], $data['userId']);

        Telegram::sendMessage([
            'chat_id' => $data['userId'],
            'text' => "#—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n" . $data['answerUser'],
            'parse_mode' => 'HTML'
        ]);

        return redirect()->back()->with('status', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID:' . $data['userId']);
    }


    public function setWebhook(Request $request) {
        $settingsModel = new SettingModel();
        $url = $settingsModel->getSettins()->value;

        $result = Telegram::setWebhook([
            'url' => $url . '/' . self::$_token . '/webhook'
        ]);


        $status = Telegram::getWebhookInfo();

        //return response()->view('home', $status, 200);
        return redirect()->back()->with('status', (string) $status);
    }

    public function removeWebhook(Request $request) {
        $response = Telegram::removeWebhook();

        return redirect()->back()->with('status', (string) $response);
    }

    public function getWebhookUpdates(Request $request) {
        $logicModel = new LogicModel();
        $paramsModel = new bot_settings();
        $botParams = $paramsModel->getSettings()[0];

        if (isset($request['message']['text'])) {
            if (!$logicModel->checkUser($request['message']['from']['id'])) {
                if (stristr($request['message']['text'], '/start')) {
                    $arInvite = explode(' ', $request['message']['text']);
                    if (count($arInvite) > 1)
                        $invite = $arInvite[1];
                    else
                        $invite = 0;

                    Telegram::sendMessage([
                        'chat_id' => $request['message']['from']['id'],
                        'text' => '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Ä–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:' . chr(10) . chr(10) . '<b>' . $botParams->Registration_question . '</b>',
                        'parse_mode' => 'HTML'
                    ]);

                    $user = [
                        'id' => $request['message']['from']['id'],
                        'username' => $request['message']['from']['first_name'],
                        'inviteId' => $invite
                    ];
                    $logicModel->addUser($user);
                    if ($invite != 0)
                        $logicModel->addToBalance($invite, $botParams->Referal_sum);
                }
            }
            else {

                if ($logicModel->getBlockUserField($request['message']['from']['id'])->ban == 2) {
                    if ($request['message']['text'] != $botParams->Registration_answer) {
                        Telegram::sendMessage([
                            'chat_id' => $request['message']['from']['id'],
                            'text' => 'üí¢ –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:' . chr(10) . chr(10) . '<b>' . $botParams->Registration_question . '</b>',
                            'parse_mode' => 'HTML'
                        ]);
                    }
                    else {
                        $reply_markup =  Keyboard::make([
                            'keyboard' => $this->keyboard,
                            'resize_keyboard' => true,
                        ]);

                        Telegram::sendMessage([
                            'chat_id' => $request['message']['from']['id'],
                            'text' => "‚òëÔ∏è –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n–ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ " . $botParams->Registration_sum * $this->bitcoin . " —Å–∞—Ç–æ—à–∏.",
                            'parse_mode' => 'HTML',
                        ]);
                        $params = [
                            'userId' => $request['message']['from']['id'],
                            'date' => '2019-12-01 21:00:01'
                        ];
                        $logicModel->setMessageId($request['message']['from']['id'], $params);
                        $logicModel->addToBalance($request['message']['from']['id'], $botParams->Registration_sum);

                        Telegram::sendMessage([
                            'chat_id' => $request['message']['from']['id'],
                            'text' => $botParams->Welcome_message,
                            'parse_mode' => 'HTML',
                            'reply_markup' => $reply_markup
                        ]);

                        $logicModel->updateUserField($request['message']['from']['id'], 'ban', 0);
                    }
                }
                elseif ($logicModel->getBlockUserField($request['message']['from']['id'])->ban == 1) {
                    Telegram::sendMessage([
                        'chat_id' => $request['message']['from']['id'],
                        'text' => 'üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!'
                    ]);
                }
                else {
                    $userFrames = $logicModel->getUserFrame($request['message']['from']['id']);
                    if ($userFrames[0]->paymentFrame == 0 && $userFrames[0]->bonusFrame == 0 && $userFrames[0]->questionFrame == 0) {
                        /*–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç*/
                        if (stristr($request['message']['text'], '/start') || $request['message']['text'] == 'üîô –ù–∞–∑–∞–¥') {
                            $reply_markup =  Keyboard::make([
                                'keyboard' => $this->keyboard,
                                'resize_keyboard' => true,
                            ]);

                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => $botParams->Welcome_message,
                                'parse_mode' => 'HTML',
                                'reply_markup' => $reply_markup
                            ]);
                            $logicModel->updateUserFrame($request['message']['from']['id'], 'questionFrame', 0);
                            $logicModel->updateUserFrame($request['message']['from']['id'], 'bonusFrame', 0);
                            $logicModel->updateUserFrame($request['message']['from']['id'], 'paymentFrame', 0);

                        }
                        elseif ($request['message']['text'] == 'üó£ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å') {
                            $logicModel->updateUserFrame($request['message']['from']['id'], 'questionFrame', 1);
                            $reply_markup =  Keyboard::make([
                                'keyboard' => $this->questionKeyboard,
                                'resize_keyboard' => true,
                            ]);
                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => 'üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –º—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º.',
                                'reply_markup' => $reply_markup
                            ]);
                        }
                        elseif ($request['message']['text'] == 'üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π') {
                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => "üéÅ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç–∞. –ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –∫—Ç–æ –ø—Ä–∏—à–µ–ª –≤ –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º. \n\nüíµ–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n - " . $botParams->Referal_sum  * $this->bitcoin . " —Å–∞—Ç–æ—à–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. \n - " . $botParams->Referal_procent . " % –æ—Ç –∫–∞–∂–¥–æ–≥–æ –±–æ–Ω—É—Å–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º. \n\n<b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b> https://t.me/bitcoinManinerr_bot?start=" . $request['message']['from']['id'],
                                'parse_mode' => 'HTML',
                            ]);
                        }
                        elseif ($request['message']['text'] == 'üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫') {
                            $user = $logicModel->getUserById($request['message']['from']['id']);
                            $reply_markup =  Keyboard::make([
                                'keyboard' => $this->paymentKeyboard,
                                'resize_keyboard' => true,
                            ]);
                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => "<b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\nID: " . $user->telegramId . "\n\n–ë–∞–ª–∞–Ω—Å: " . $user->balance * $this->bitcoin . " —Å–∞—Ç–æ—à–∏.\n–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã : " . $user->referalCount . "  —á–µ–ª–æ–≤–µ–∫–∞.",
                                'parse_mode' => 'HTML',
                                'reply_markup' => $reply_markup
                            ]);
                        }
                        elseif ($request['message']['text'] == 'üí∏ –í—ã–≤–µ—Å—Ç–∏') {
                            $balance = $logicModel->accessBalance($request['message']['from']['id']);
                            if ($balance > $botParams->Minimal_windrow_sum) {
                                $reply_markup =  Keyboard::make([
                                    'keyboard' => $this->paymentKeyboardFrame,
                                    'resize_keyboard' => true,
                                ]);

                                Telegram::sendMessage([
                                    'chat_id' => $request['message']['from']['id'],
                                    'text' => "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –≤ BTC\n\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 0.0002</i>",
                                    'parse_mode' => 'HTML',
                                    'reply_markup' => $reply_markup
                                ]);
                                $logicModel->updateUserFrame($request['message']['from']['id'], 'paymentFrame', 1);
                            } else {
                                $reply_markup =  Keyboard::make([
                                    'keyboard' => $this->keyboard,
                                    'resize_keyboard' => true,
                                ]);
                                Telegram::sendMessage([
                                    'chat_id' => $request['message']['from']['id'],
                                    'text' => "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è –≤—ã–≤–æ–¥–∞\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <b>" . number_format($botParams->Minimal_windrow_sum, 4, ".", "") . " BTC</b>",
                                    'parse_mode' => 'HTML',
                                    'reply_markup' => $reply_markup
                                ]);
                            }
                        }
                        elseif ($request['message']['text'] == 'üí∏ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å') {
                            $keyboard = array("inline_keyboard"=>self::$bonusKeyboard, 'one_time_keyboard' => true);
                            $keyboard = json_encode($keyboard);

                            if ($logicModel->checkMessageDate($request['message']['from']['id'])) {
                                $response = Telegram::sendMessage([
                                    'chat_id' => $request['message']['from']['id'],
                                    'text' => (string) '–¢—ã –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å". –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–∑.',
                                    'reply_markup' => $keyboard
                                ]);
                                $params = [
                                    'messageId' => $response['message_id'],
                                    'userId' => $response['chat']['id'],
                                    'date' => Carbon::now()
                                ];
                                $logicModel->setMessageId($response['chat']['id'], $params);
                            } else {
                                $date = $logicModel->getLastMessageDate($request['message']['from']['id']);
                                if (isset($date[0])) {
                                     $answer = Carbon::parse($date[0]->dataLast)->addMinutes(1440)->diffAsCarbonInterval(Carbon::now())->locale('ru');
                                } else {
                                    $answer = '–ë–æ–Ω—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                                }
                                Telegram::sendMessage([
                                    'chat_id' => $request['message']['from']['id'],
                                    'text' => "‚è± –î–æ —Å–ª–µ–¥—é—â–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: <b>" . (string) $answer . "</b>",
                                    'parse_mode' => 'HTML',
                                ]);
                            }

                        }
                    }

                    if ($userFrames[0]->questionFrame == 1) {
                        if ($request['message']['text'] != 'üîô –ù–∞–∑–∞–¥') {
                            $logicModel->addQuestion($request['message']['from']['id'], $request['message']['text']);
                            $logicModel->updateUserFrame($request['message']['from']['id'], 'questionFrame', 0);
                            $reply_markup =  Keyboard::make([
                                'keyboard' => $this->keyboard,
                                'resize_keyboard' => true,
                            ]);
                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => '‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.',
                                'reply_markup' => $reply_markup
                            ]);
                        } else {
                            $logicModel->updateUserFrame($request['message']['from']['id'], 'questionFrame', 0);
                            $reply_markup =  Keyboard::make([
                                'keyboard' => $this->keyboard,
                                'resize_keyboard' => true,
                            ]);

                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => $botParams->Welcome_message,
                                'parse_mode' => 'HTML',
                                'reply_markup' => $reply_markup
                            ]);
                        }
                    }
                    elseif ($userFrames[0]->paymentFrame == 1) {
                        if ($request['message']['text'] != 'üîô –ù–∞–∑–∞–¥') {
                            if ((double)str_replace(',', '.', $request['message']['text'])) {
                                $sum = (double)str_replace(',', '.', $request['message']['text']);
                                $balanceAr = $logicModel->getUserBalance($request['message']['from']['id']);
                                if (isset($balanceAr[0])) {
                                    if ((double)$balanceAr[0]->balance < $sum) {
                                        Telegram::sendMessage([
                                            'chat_id' => $request['message']['from']['id'],
                                            'text' => 'üö´ –û—à–∏–±–∫–∞. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!',
                                            'parse_mode' => 'HTML'
                                        ]);
                                        $reply_markup =  Keyboard::make([
                                            'keyboard' => $this->keyboard,
                                            'resize_keyboard' => true,
                                        ]);
                                        Telegram::sendMessage([
                                            'chat_id' => $request['message']['from']['id'],
                                            'text' => $botParams->Welcome_message,
                                            'parse_mode' => 'HTML',
                                            'reply_markup' => $reply_markup
                                        ]);
                                        $logicModel->updateUserFrame($request['message']['from']['id'], 'paymentFrame', 0);
                                    } else {
                                        $logicModel->updateUserFrame($request['message']['from']['id'], 'paymentFrame', 2);
                                        $params = [
                                            'userId' => $request['message']['from']['id'],
                                            'value' => $sum
                                        ];
                                        $logicModel->setPaymentTransaction($params);
                                        Telegram::sendMessage([
                                            'chat_id' => $request['message']['from']['id'],
                                            'text' => '‚úÖ –£—Å–ø–µ—Ö! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à BTC –∫–æ—à–µ–ª–µ–∫',
                                            'parse_mode' => 'HTML',
                                        ]);
                                    }
                                }
                            }
                            else {

                                    Telegram::sendMessage([
                                        'chat_id' => $request['message']['from']['id'],
                                        'text' => 'üö´ –û—à–∏–±–∫–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ!',
                                        'parse_mode' => 'HTML'
                                    ]);

                            }
                        }
                        else {
                            $logicModel->updateUserFrame($request['message']['from']['id'], 'paymentFrame', 0);
                            $reply_markup =  Keyboard::make([
                                'keyboard' => $this->keyboard,
                                'resize_keyboard' => true,
                            ]);

                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => $botParams->Welcome_message,
                                'parse_mode' => 'HTML',
                                'reply_markup' => $reply_markup
                            ]);
                        }
                    }
                    elseif ($userFrames[0]->paymentFrame == 2) {
                        if ($request['message']['text'] != 'üîô –ù–∞–∑–∞–¥') {
                            $params = [
                                'btc' => $request['message']['text'],
                                'userId' => $request['message']['from']['id'],
                            ];
                            $reply_markup =  Keyboard::make([
                                'keyboard' => $this->keyboard,
                                'resize_keyboard' => true,
                            ]);
                            $logicModel->setPaymentTransaction($params);
                            $dataLogin = $logicModel->getPaymentTransaction($request['message']['from']['id']);
                            $logicModel->removeToBalance($request['message']['from']['id'], $dataLogin->value);
                            $paramsList = [
                                'btc' => $request['message']['text'],
                                'userId' => $request['message']['from']['id'],
                                'value' => $dataLogin->value
                            ];
                            $logicModel->setPaymentList($paramsList);
                            $logicModel->removePaymentTransaction($request['message']['from']['id']);
                            $logicModel->updateUserFrame($request['message']['from']['id'], 'paymentFrame', 0);
                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => '‚úÖ –£—Å–ø–µ—Ö! –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞',
                                'parse_mode' => 'HTML',
                            ]);
                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => $botParams->Welcome_message,
                                'parse_mode' => 'HTML',
                                'reply_markup' => $reply_markup
                            ]);
                        }
                        else {
                            $logicModel->updateUserFrame($request['message']['from']['id'], 'paymentFrame', 0);
                            $logicModel->removePaymentTransaction($request['message']['from']['id']);
                            $reply_markup =  Keyboard::make([
                                'keyboard' => $this->keyboard,
                                'resize_keyboard' => true,
                            ]);

                            Telegram::sendMessage([
                                'chat_id' => $request['message']['from']['id'],
                                'text' => $botParams->Welcome_message,
                                'parse_mode' => 'HTML',
                                'reply_markup' => $reply_markup
                            ]);
                        }
                    }
                }
            }
        }
        elseif(isset($request['callback_query']))  {

            Telegram::editMessageText([
                'chat_id' => $request['callback_query']['message']['chat']['id'],
                'text' => "<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n üí∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–∑ –≤ —Ä–∞–∑–º–µ—Ä–µ: " . (string) $request['callback_query']['data'] . " —Å–∞—Ç–æ—à–∏",
                'message_id' => $request['callback_query']['message']['message_id'],
                'parse_mode' => 'HTML',
            ]);
            $logicModel->addToBalance($request['callback_query']['message']['chat']['id'], $request['callback_query']['data'] / $this->bitcoin);
            $logicModel->addToInviteBalance($request['callback_query']['message']['chat']['id'], ($request['callback_query']['data'] * ($botParams->Referal_procent / 100))  / $this->bitcoin);
        }


        //return redirect()->back()->with('status', (string) $request);
    }



}
